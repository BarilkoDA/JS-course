"use strict";
// Подходы

/* 
Истинно функциональный подход
Объектно ориентированный подход
Процедурный подход 
и многие другие
*/

//JS является объектно ориентированный языком
// Главную роль в нем играет объект
// Он может содержать в себе функции данные и являтся отдельной боевой единицей

/* Смысл ООП состоит в том, что мы представляем любую вещь как объект с набором 
свойств и методов. */

// Как только примитивный тип данных использует метод JS оборачивает его в объект

let str = "some"; // примитивный тип данных
let srtObj = new String(str); // объект

console.log(typeof(str));
console.log(typeof(srtObj));

// пример прототипа - легковой автомобиль
// его потомки могут иметь различные колеса, цвет, модель, марку, двигатель но все они являются легковыми автомобилями.

// Объекты и массивы могут содержать совершенно разные данные, но все они будут иметь одни и те же методы.
// Когда мы создаем массив мы создаем новый экзепляр протатипа массивов.

// Любые конструкции протатипно наследуются от объекта

const solder = {
    health: 400, 
    armor: 100,
    sayHello: function() {
        console.log("Hello!");
    }
};

/* const jonh = {
    health: 100
}; */

// Устаревший формат

//jonh.__proto__ = solder;

//console.log(jonh.armor);
//jonh.sayHello();

// Современный метод
/* 
Object.setPrototypeOf(jonh, solder);
jonh.sayHello(); */

const ben = Object.create(solder);
ben.sayHello();