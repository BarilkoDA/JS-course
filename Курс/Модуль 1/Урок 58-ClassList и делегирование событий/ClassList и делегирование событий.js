"use strict";

const btns = document.querySelectorAll('button');

// Для обращения к списку классов требуется прописать .classList - Это свойство которое есть у дом узла

console.log(btns[0].classList.length); // получить количество классов у элемента

// Методы свойства classList

/*
.item() - позволяет получить класс который распологается под конкретным индексом. 
*/
console.log(btns[0].classList.item(0));

/*
.add() - Добавляет определенные классы
.remove() - удаляет не нужные классы
.toggle() - позволяет тоглить классы. (если класс есть он будет убран, если его нет он будет добавлен.)

В add и remove можно передать несколько классов.

btns[0].classList.add('red', 'blue')
*/

console.log(btns[0].classList.add('red'));
console.log(btns[0].classList.add('blue'));

// .contains() - проверяет наличие класса на определенном элементе. Часто используется в условиях
//Проверяет наличие определенного класса на определенном элементе и возарвщает булиновое значение. Если класс есть - true если нет - false

if (btns[1].classList.contains('red')) {

}

// .className - содержит классы в одну строку. (устаревший вариант)

// Делегирование событий

/*
Делегирование событий - бывает так, что страница содержит множество кнопок. Мы хотим, что бы при клике на них
вызывалось одно и то же событые.

Можно повесить событие на все кнопки но есть большая проблема.
Если кнопки или иные тригеры будут добавляться без нашего ведома, то событий на них не будет.

Для делигирования мы берем родительский элемент для кнопок и работаем с ним.
Обработчик вешаем на родителя а внутри мы будем проверять на что мы кликнули.
Назначаем функцию на потомков которые подходят под определенные параметры.
*/

const wrapper = document.querySelector('.btn-block');

wrapper.addEventListener('click', (event) => {
    if (event.target && event.target.tagName == "BUTTON") {

    }
}); // делегирование эвента для тегов BUTTON в родителе

wrapper.addEventListener('click', (event) => {
    if (event.target && event.target.classList.contains == "blue") {
        
    }
}); // делегирование эвента для элементов с классом blue

// у event.target есть метод matches по простому элемент совпадает с чем то.

wrapper.addEventListener('click', (event) => {
    if (event.target && event.target.matches("button.red")) {

    }
}); // обработчик будет висеть только на кнопках с классом red

/*
Делгирование событий - один из самых полезных приемов для работы с дом деревом.
Он отлично подходит если есть множество элементов с одинакоыми обработчиками.
При динамическом построении страницы новые элементы так же будут содержать требуемые обработчики.

Данный метод позволяет написать меньше кода и экономить память браузера.
*/
