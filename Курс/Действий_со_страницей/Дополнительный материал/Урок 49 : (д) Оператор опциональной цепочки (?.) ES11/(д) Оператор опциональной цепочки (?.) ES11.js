'use strict';

const box = document.querySelector('.box');
const block = document.querySelector('.block');

console.log(block); // будет null так как этого элемента нет на странице

console.log(block.textContent); // пытаемся обратиться к данным элемента который не существует. Дальнейший скрипт выполняться не будет.

console.log(1 + 2); // Строка не выполняется

// Для решения этой проблемы потенциально опасные места оборачивают в условие

if (block) {
    console.log(block.textContent); 
}

// В этом случае если условие не сработало то код который вызовет ошибку не будет выполненн и соответственно 
// оставшаяся часть скрипта реализуется.

/*
Для того чтобы избавиться от громоздкого кода используется оператор опциональной цепочки
*/

console.log(block?.textContent);
/* 
Оператор ? проверяет значение слева от себя и если оно имеет значение undefined либо null
то он останавливает операцию и возвращает undefinded */

let un = undefined;
let nu = null;

console.log(un?.text);
console.log(nu?.text);
/* 
Но это работает на чтение свойства.
Есои попробовать что либо записать - мы получим ошибку.
 */
 
/* Максимальная польза от этого оператора начнется когда мы будем работать с данными
Они могу приходить как от пользователя так и от веб сервера. */

const userData = {
    name: 'Ivan',
    age: null,
    say: function () {
        console.log('Hello');
    }
};

if (userData && userData.skills && userData.skills.js) {
    console.log(userData.skills.js);
}  

// или

console.log(userData.skills?.js); // Оператор проверит часть слева от себя и пойдет дальше
//Если ее не существует то код прекратиться и оператор вернет undefined
//Один символ позволяет избавляться от лишнего кода и дополнительных проверок

/* Данный оператор кажется сверх удобным и его хочется использовать везде,
но не нужно злоупотреблять. Но существует ситуация когда сайт ломается но ошибок нет 
и ничего не происходит. В этом случае черезвычайно сложно найти причину поломки. */

//Его стоит использовать только там, где предполагаются проблемы.

userData.say();
userData.hey?.(); // проверяем левую часть на то, существует ли такой метод Если метод не существует - возвращаем undefined

// Оператор используется там где могут быть потенциально не существующую логику