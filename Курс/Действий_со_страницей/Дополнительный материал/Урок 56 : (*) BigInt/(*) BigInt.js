// Тип данных BigInt

//Number.MAX_SAFE_INTEGER - 9007199254740991 (2 в 53 степени -1) - максимально доступное число с которым JS умеет корректно работать.

console.log(Number.MAX_SAFE_INTEGER);

//Объявление bigint
//1) в конце значения добавить n
//const bigint = 900719925474099190071992547409919007199254740991n;
//2) Использовать обертку BigInt()
const sameBigint = BigInt(900719925474099190071992547409919007199254740991);

console.log(typeof(bigint));

// 1) BigInt нельзя использовать методы со встроенным объектом MATH()

/* console.log(Math.round(10n));
console.log(Math.round(BigInt(10))); */

// 2) нельзя смешивать операции обыное число и bigint

/* console.log(5 + 5n); */

// Операции можно применять к однотипным BigInt значениям

console.log(1n + 2n);

/* 
Следующие операторы можно использовать с BigInt:

C BigInt можно адекватно использовать:
    сложение +
    умножение *
    вычитание -
    возведение в степень **
    деление с остатком %

    деление / - операция деления всегда будет возвращать округленный результат без дробной части.

Все действия будут возвращать значение с типом bigint

Операторы сравнения будут корректно работать даже при сравнении с обычными числами.
    

Если в рамках задачи приходится к примеру сложить BigInt с обычным числом то прийдется явно конвертировать типы данных.
 */

let Bigint = 1n;
let number = 2;

console.log(Bigint + BigInt(number));

console.log(Number(Bigint) + number);

console.log(+Bigint + number); // Получится ошибка. Унарный плюс не поможет в конвертации bigint в число

//Если bigint при конвертации больше допустимой границы то оставшаяся часть будет просто отброшена

const bigIntNumber = 900719925474099190071992547409919007199254740991n;

console.log(bigIntNumber);

console.log(typeof(bigIntNumber));

console.log(Number(bigIntNumber));

// BigInt стоит использовать ТОЛЬКО там где он необходим.

