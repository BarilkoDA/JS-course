"use strict";

/* 
Как взаиможействовать с эдементами нашей страницы

События - сигнал от браузера о том, что что то произошло
Клик, 
Двойной клик, 
Наведение мыши, 
Убрать мышь с элемента, 
Прокрутка колесиком мыши, 

Отправка данных в форме и многое другое
https://oddler.ru/blog/i63
https://developer.mozilla.org/ru/docs/Web/Events

Что бы использовать любое событие мы должны назначить обработчик события.
обработчик события это функция которая срабатывает как только событие произошло.
 
Существует 3 способа назначить обработчики событий

//1) HTML атрибут в верстке (В реальных проектах такой код не используется)

//прописываем событие с приставкой on

onclick="alert('Click')" // Нельзя использовать идентичные ковычки друг в друге
*/
/* 
2) Использовать свойства дом дерева для событий
    (В реальных проектах такой код так же не используется из за того, что 
        в большем коде может произойти дублирование свойства
        Так же если назначить собитие по указанному варианту то удалить его мы не сможем) */

/* const btn = document.querySelector('button');

btn.onclick = function() {
    alert('Click');
}; */

//3) В проектах используют добавление собитий через синтаксис addEventReser и addEventListener
// Данный способ позволяет назначить несколько действий на одно событие
btn.addEventListener('click', () => {
    alert('Click');
});

btn.addEventListener('click', () => {
    alert('Second click');
});

/* События в JS выполняются в порядке очереди. При поступлении нового события
оно добавляется в очередь. 

*/

btn.addEventListener('mouseenter', () => { // Событие наведения мыши на элемент
    console.log('Hover');
});

/* 
Первым агрументом в callback функцию передается всегда event - объект события
Если требуется передача дополнительных аргументов они передаются следом.
Event используется для оперделения данных элемента с которым мы взаимодействуем:
- что за событие произошло
- что за элемент используется
- координаты элемента 

event.type - событие которое произошло
evet.target - элемент с которым произошло событие.
    через него можно работать с элементом к примеру:
        - перкрасить
        - поменять класс
        - удалить со страницы
            btn.addEventListener('mouseenter', (event) => { 
                event.target.remove();
            });
*/

btn.addEventListener('mouseenter', (event) => { 
    event.target.remove();
});

//Для удаления обработчика событий используется removeEventListener
let i = 0;

const deleteElement = (event) => { 
    console.log(event.target);
    i++;
    if (i == 1) {
        btn.removeEventListener('click', deleteElement);
    }
};

btn.addEventListener('click', deleteElement);
/* 
Всплытие событий
Когда обработчик событий сначала срабатывает на самом вложенном элементе 
затем на родителе и выше по иерархии вложенности.

Сначала выполняется событие на потомке, а потом на родителе.
 */

// Для того, что бы подправить данное поведение можно использовать 
// (event.currentTarget);

/* 
Для отмены стандартного поведения в браузере используется 2 способа.

1) В обработчике событий вернуть return false в самом конце 

2) Использование метода у объекта события .preventDefault()
Помещается в самое начала обработчика событий
 */
const link = document.querySelector('a');

link.addEventListener('click', function(event) {
    event.preventDefault(); 

    console.log("text");
});

// Невозможно навесить обработчик событий на псевдомассив
// Для того, что бы на все однотипные элементы навесить ожну и ту же функцию нам
//требуется перебрать псевдомассив и на каждый навесить обработчик событий.

const btns = document.querySelectorAll('button');

btns.forEach(btn => {
    btn.addEventListener('click', function(event) {   
        console.log(event);
    }, {once: true});
});

// once: true - позволяет запускать обработчик событий только один раз 