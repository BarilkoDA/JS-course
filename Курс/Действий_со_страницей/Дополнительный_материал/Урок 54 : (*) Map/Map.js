/*
Структура map - карты

Ключи в объекте могут быть только строками или символами

Если в ключ передать к примеру 4 - она все равно превратиться в строку.
Это сделано для того, что бы избежать ошибок в коде.
Если в ключ мы попробуем передать объект - мы сразу получим ошибку. 
*/

const user = {
   name: 'Alex',
   surname: 'Smith',
   bitthday: '20/04/1993',
   showMyPublicData: function() {
       console.log(`${this.name} ${this.surname}`);
   }
};

const userMap = new Map(Object.entries(user)); // Трансформация объекта в карту
const newUserObj = Object.fromEntries(userMap); // Трансформация карты в объект

console.log(userMap);

console.log(typeof(Object.keys(user)[0]));

/*
Но при этом бывают ситуации когда в ключ нам нужно передать иной тип данных

Пример:
Список магазинов в торговой сети
Каждый из магазинов содержит определенный перечень товаров 
и на каждый из них выделяется определенный бюджет
*/

const shops = [
    {rice: 500},
    {oil: 200},
    {bread: 50}
];

/*
Картами или мэпами называються спецефические структуры данных которые очень похожи на
объекты только у них вместо свойств может использоваться и объект, и массив, и фукция, и т. д.
*/
// Объявление
const map = new Map();

// Мэпы называются спецефическими структурами данных так как у них есть свои методы для работы.
// Но по типу данных это объекты.

map.set(shops[0], 5000); 

console.log(map); // По итогу мы получили объект у которого свойство так же является объектом.

//.set(); - заполнение карты

// Заполнение можно производить цепочкой

map.set(shops[0], 5000).set(shops[1], 15000).set(shops[2], 25000); 

// Или

map.set(shops[0], 5000)
   .set(shops[1], 15000)
   .set(shops[2], 25000); 

//.get(); - получить данные из карты

console.log(map.get(shops[0]));

//.has(); - проверка на наличие чего то внутри карты

console.log(map.has(shops[0]));

//.delete() - удаляет что то из карты
//.clear() - очищает карту
//.size - количество обхектов внутри карты

// Карта - это массив массивов.

//При объявлении карты мы можем указать начальные значения.

const budg = new Map([
    [{paper: 400}, 8000]
]);

// У карты существует 3 встроенных метода для перебора карты

//.keys() - получить ключи карты (итерированный объект по ключу)

const googs = [];

for(let shop of map.keys()) {
    googs.push(Object.keys(shop)[0]);
}

console.log(googs);

// .values() - получить значения карты (итерированный объект по значению)

for(let price of map.values()) { 
    console.log(price);
}

// .entries() - Получить массив с массивами первый элемент объект, второй значение.

for(let price of map.entries()) { 
    console.log(price);
}

    // Массив можно сразу деструктуризировать

    for(let [shop, price] of map.entries()) { 
        console.log(price, shop);
    }

// Использовать встроенный метод forEach()

map.forEach((value, key, map) => {
    console.log(key, value);
});


/*
Итоги сравнения карт и объектов

карты 1) у карт ключи могут быть чем угодно:
    массивы
    объекты
    функции 
    цифры
объекты 1) у объяекта ключи могут быть только строки

Карты 2) Порядок свойств в карте может быть только тот в котором мы их добавляли.
Объекты 2) У объектов нет четкого порядка в зависимости от того когда свойство было добавлено.

Карты 3) При создании пустой карты в ней ничего не будет содержиться, в том числе наследуемых свойств 
через прототип.
Обхекты 3) В пустом объекте они будут содержаться и это может быть проблемой если мы их перезапишем.

Карты 4) Карты легко перебирать
Объекты 4) С объектами сложнее

Карты 5) размер карты легко получить.
Объект 5) Для объекта приходиться трансформировать его в массив и только после жтого получить его длину.
*/